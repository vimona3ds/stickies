import {
  GameConfig,
  GameToken,
  GameTokenLayout,
  GameTokenLayoutFillType,
  GameTokenLayoutType,
} from "../types";
import { createToken } from "./createToken";

const phrases = [
  "A Bird In The Hand Is Worth Two In The Bush".split(" "),
  "A Blessing In Disguise".split(" "),
  "A Chip On Your Shoulder".split(" "),
  "A Dime A Dozen".split(" "),
  "A Doubting Thomas".split(" "),
  "A Drop In The Bucket".split(" "),
  "A Fool And His Money Are Easily Parted".split(" "),
  "A House Divided Against Itself Cannot Stand".split(" "),
  "A Leopard Can't Change His Spots".split(" "),
  "A Penny Saved Is A Penny Earned".split(" "),
  "A Picture Paints A Thousand Words".split(" "),
  "A Piece Of Cake".split(" "),
  "A Slap On The Wrist".split(" "),
  "A Taste Of Your Own Medicine".split(" "),
  "A Toss Up".split(" "),
  "Actions Speak Louder Than Words".split(" "),
  "Against The Clock".split(" "),
  "All Bark And No Bite".split(" "),
  "All Greek To Me".split(" "),
  "All In The Same Boat".split(" "),
  "An Arm And A Leg".split(" "),
  "An Axe To Grind".split(" "),
  "Apple Of My Eye".split(" "),
  "As High As A Kite".split(" "),
  "At The Drop Of A Hat".split(" "),
  "Back Seat Driver".split(" "),
  "Back To Square One".split(" "),
  "Back To The Drawing Board".split(" "),
  "Baker's Dozen".split(" "),
  "Barking Up The Wrong Tree".split(" "),
  "Beat A Dead Horse".split(" "),
  "Beating Around The Bush".split(" "),
  "Bend Over Backwards".split(" "),
  "Between A Rock And A Hard Place".split(" "),
  "Bite Off More Than You Can Chew".split(" "),
  "Bite Your Tongue".split(" "),
  "Blood Is Thicker Than Water".split(" "),
  "Blue Moon".split(" "),
  "Break A Leg".split(" "),
  "Buy A Lemon".split(" "),
  "Can't Cut The Mustard".split(" "),
  "Cast Iron Stomach".split(" "),
  "Charley Horse".split(" "),
  "Chew Someone Out".split(" "),
  "Chip On His Shoulder".split(" "),
  "Chow Down".split(" "),
  "Close But No Cigar".split(" "),
  "Cock And Bull Story".split(" "),
  "Come Hell Or High Water".split(" "),
  "Crack Someone Up".split(" "),
  "Dark Horse".split(" "),
  "Dead Ringer".split(" "),
  "Devil's Advocate".split(" "),
  "Dog Days Of Summer".split(" "),
  "Don't Count Your Chickens Before They Hatch".split(" "),
  "Don't Look A Gift Horse In The Mouth".split(" "),
  "Don't Put All Your Eggs In One Basket".split(" "),
  "Doozy".split(" "),
  "Down To The Wire".split(" "),
  "Drastic Times Call For Drastic Measures".split(" "),
  "Drink Like A Fish".split(" "),
  "Drive Someone Up The Wall".split(" "),
  "Dropping Like Flies".split(" "),
  "Dry Run".split(" "),
  "Eighty Six".split(" "),
  "Elvis Has Left The Building".split(" "),
  "Ethnic Cleansing".split(" "),
  "Every Cloud Has A Silver Lining".split(" "),
  "Everything But The Kitchen Sink".split(" "),
  "Excuse My French".split(" "),
  "Cock And Bull Story".split(" "),
  "Feeding Frenzy".split(" "),
  "Field Day".split(" "),
  "Finding Your Feet".split(" "),
  "Finger Lickin' Good".split(" "),
  "Fixed In Your Ways".split(" "),
  "Flash In The Pan".split(" "),
  "Flea Market".split(" "),
  "Flesh And Blood".split(" "),
  "Flip The Bird".split(" "),
  "Foam At The Mouth".split(" "),
  "Fools' Gold".split(" "),
  "French Kiss".split(" "),
  "From Rags To Riches".split(" "),
  "Full Monty".split(" "),
  "Funny Farm".split(" "),
  "Get Down To Brass Tacks".split(" "),
  "Get Over It".split(" "),
  "Get Up On The Wrong Side Of The Bed".split(" "),
  "Get Your Walking Papers".split(" "),
  "Give Him The Slip".split(" "),
  "Go Down Like A Lead Balloon".split(" "),
  "Go For Broke".split(" "),
  "Go Out On A Limb".split(" "),
  "Go The Extra Mile".split(" "),
  "Good Samaritan".split(" "),
  "Graveyard Shift".split(" "),
  "Great Minds Think Alike".split(" "),
  "Green Room".split(" "),
  "Gut Feeling".split(" "),
  "Haste Makes Waste".split(" "),
  "Hat Trick".split(" "),
  "Have An Axe To Grind".split(" "),
  "He Lost His Head".split(" "),
  "Head Over Heels".split(" "),
  "Hell In A Handbasket".split(" "),
  "High Five".split(" "),
  "High On The Hog".split(" "),
  "Hit The Books".split(" "),
  "Hit The Hay".split(" "),
  "Hit The Nail On The Head".split(" "),
  "Hit The Sack".split(" "),
  "Hocus Pocus".split(" "),
  "Hold Your Horses".split(" "),
  "Icing On The Cake".split(" "),
  "Idle Hands Are The Devil's Tools".split(" "),
  "If It's Not One Thing, It's Another".split(" "),
  "In Like Flynn".split(" "),
  "In The Bag".split(" "),
  "In The Buff".split(" "),
  "In The Heat Of The Moment".split(" "),
  "In Your Face".split(" "),
  "It Takes Two To Tango".split(" "),
  "It's A Small World".split(" "),
  "Its Anyone's Call".split(" "),
  "Jaywalk".split(" "),
  "Joshing Me".split(" "),
  "Keep An Eye On Him".split(" "),
  "Keep Body And Soul Together".split(" "),
  "Keep Your Chin Up".split(" "),
  "Kick The Bucket".split(" "),
  "Kitty Corner".split(" "),
  "Knee Jerk Reaction".split(" "),
  "Knock On Wood".split(" "),
  "Know The Ropes".split(" "),
  "Last But Not Least".split(" "),
  "Lend Me Your Ear".split(" "),
  "Let Bygones Be Bygones".split(" "),
  "Let Sleeping Dogs Lie".split(" "),
  "Let The Cat Out Of The Bag".split(" "),
  "Level Playing Field".split(" "),
  "Like A Chicken With Its Head Cut Off".split(" "),
  "Liquor Someone Up".split(" "),
  "Long In The Tooth".split(" "),
  "Loose Cannon".split(" "),
  "Make No Bones About".split(" "),
  "Method To My Madness".split(" "),
  "Mumbo Jumbo".split(" "),
  "Mum's The Word".split(" "),
  "Nest Egg".split(" "),
  "Never Bite The Hand That Feeds You".split(" "),
  "New Kid On The Block".split(" "),
  "New York Minute".split(" "),
  "No Dice".split(" "),
  "No Room To Swing A Cat".split(" "),
  "Not Playing With A Full Deck".split(" "),
  "Off On The Wrong Foot".split(" "),
  "Off The Hook".split(" "),
  "Off The Record".split(" "),
  "On Pins And Needles".split(" "),
  "On The Fence".split(" "),
  "On The Same Page".split(" "),
  "Out Of The Blue".split(" "),
  "Out On A Limb".split(" "),
  "Out On The Town".split(" "),
  "Over My Dead Body".split(" "),
  "Over The Top".split(" "),
  "Pass The Buck".split(" "),
  "Pedal To The Metal".split(" "),
  "Peeping Tom".split(" "),
  "Pick Up Your Ears".split(" "),
  "Pig In A Poke".split(" "),
  "Pig Out".split(" "),
  "Pipe Down".split(" "),
  "Practice Makes Perfect".split(" "),
  "Pull The Plug".split(" "),
  "Pulling Your Leg".split(" "),
  "Put A Sock In It".split(" "),
  "Raincheck".split(" "),
  "Raining Cats And Dogs".split(" "),
  "Ring Fencing".split(" "),
  "Rise And Shine".split(" "),
  "Rome Was Not Built In One Day".split(" "),
  "Rule Of Thumb".split(" "),
  "Run Out Of Steam".split(" "),
  "Sixth Sense".split(" "),
  "Skid Row".split(" "),
  "Smell A Rat".split(" "),
  "Smell Something Fishy".split(" "),
  "Son Of A Gun".split(" "),
  "Southpaw".split(" "),
  "Spitting Image".split(" "),
  "Start From Scratch".split(" "),
];

// if difficulty is hard, never show cases
const sentences = [
  ["Quick", "Brown", "Fox"],
  ["The", "Eiffel", "Tower"],
  ["Stonehenge"],
  ["I", "Need", "More", "Friends"],
  ["I", "Have", "Too", "Much", "Time"],
  ["Stop", "Procrastinating"],
  ["Hello", "World"],
  ["Not", "My", "Cup", "Of", "Tea"],
  ["Raining", "Cats", "And", "Dogs"],
  ["A", "Piece", "Of", "Cake"],
  ["A", "Dime", "A", "Dozen"],
  ["Back", "To", "The", "Drawing", "Board"],
  ["Barking", "Up", "The", "Wrong", "Tree"],
  ["Beat", "Around", "The", "Bush"],
  ["Best", "Thing", "Since", "Sliced", "Bread"],
  ["Bite", "Off", "More", "Than", "You", "Can", "Chew"],
  ["Burn", "The", "Midnight", "Oil"],
  ["Burst", "Your", "Bubble"],
  ["Can't", "Judge", "A", "Book", "By", "Its", "Cover"],
  ["When", "Pigs", "Fly"],
  ["Wild", "Goose", "Chase"],
  ["When", "In", "Rome"],
  ["When", "It", "Rains,", "It", "Pours"],
  ["When", "Life", "Gives", "You", "Lemons,", "Make", "Lemonade"],
  ["I", "Play", "This", "Game", "Too", "Much"],
  ["I", "Play", "This", "Game", "Too", "Little"],
  ["Loser", "Loser", "Loser", "Loser", "Loser"],
  ["Sorry?For?Being?So?Annoying"],
  ["~!@#$%^&*()_+"],
  ["a a a a a a a a a a a a a a a a a"],
  ["b b b b b b b b b b b b b b b b b"],
  ["abcdefghijklmnopqrstuvwxyz"],
  ["0123456789"],
  ["I", "Am", "A", "Robot"],
  ["I", "Am", "Not", "A", "Robot"],
  ["?", "Is", "A", "Question", "Mark"],
  ["!", "Is", "An", "Exclamation", "Mark"],
  ["I", "Am", "A", "Human"],
  ["I", "Am", "Not", "A", "Human"],
  ["I", "Am", "A", "Dog"],
  ["I", "Am", "Not", "A", "Dog"],
  ["2", "+", "2", "=", "4"],
  ["1", "+", "1", "=", "2"],
  ["3", "+", "3", "=", "6"],
  ["4", "+", "4", "=", "8"],
  ["5", "+", "5", "=", "10"],
  ["6", "+", "6", "=", "12"],
  ["7", "+", "7", "=", "14"],
  ["8", "+", "8", "=", "16"],
  ["9", "+", "9", "=", "18"],
  ["10", "+", "10", "=", "20"],
  ["11", "+", "11", "=", "22"],
  ["12", "+", "12", "=", "24"],
  ["13", "+", "13", "=", "26"],
  ["14", "+", "14", "=", "28"],
  ["15", "+", "15", "=", "30"],
  ["16", "+", "16", "=", "32"],
  ["17", "+", "17", "=", "34"],
  ["18", "+", "18", "=", "36"],
  ["19", "+", "19", "=", "38"],
  ["20", "+", "20", "=", "40"],
  ["17", "+", "300", "=", "317"],
  ["1", "+", "2", "+", "3", "=", "6"],
  ["1", "+", "2", "+", "3", "+", "4", "=", "10"],
  ["1", "+", "2", "+", "3", "+", "4", "+", "5", "=", "15"],
  ["1", "+", "2", "+", "3", "+", "4", "+", "5", "+", "6", "=", "21"],
  ["17", "+", "300", "+", "4000", "=", "4317"],
  ["911", "+", "1911", "=", "2822"],
  ["Cat", "In", "The", "Hat"],
  ["Go", "To", "https://smelly.zone"],
  [new Date().toUTCString()],
].concat(phrases);

const randomElementFrom = <T>(array: T[]): T =>
  array[Math.floor(Math.random() * array.length)];
const bidirectionalLayoutTypes = [
  GameTokenLayoutFillType.LEFT_UP,
  GameTokenLayoutFillType.LEFT_DOWN,
  GameTokenLayoutFillType.RIGHT_UP,
  GameTokenLayoutFillType.RIGHT_DOWN,
  GameTokenLayoutFillType.UP_LEFT,
  GameTokenLayoutFillType.UP_RIGHT,
  GameTokenLayoutFillType.DOWN_LEFT,
  GameTokenLayoutFillType.DOWN_RIGHT,
];

// can we generate this given a seed? like todays date in PST. so everyone gets the same thing
export function createRandomGameConfig(): GameConfig {
  const sentence = randomElementFrom(sentences);
  const size = Math.ceil(Math.sqrt(sentence.join("").length));
  const config = {
    id: 0,
    rows: size,
    cols: size,
    tokens: [] as GameToken[],
  };

  const directionLayouts: GameTokenLayout[] = [
    {
      type: GameTokenLayoutType.DIRECTION,
      fillType: randomElementFrom(bidirectionalLayoutTypes),
      initialPosition: { x: 0, y: size - 1 },
      direction: { x: 1, y: -1 },
    },
    {
      type: GameTokenLayoutType.DIRECTION,
      fillType: randomElementFrom(bidirectionalLayoutTypes),
      initialPosition: { x: size - 1, y: size - 1 },
      direction: { x: -1, y: -1 },
    },
    {
      type: GameTokenLayoutType.DIRECTION,
      fillType: randomElementFrom(bidirectionalLayoutTypes),
      initialPosition: { x: size - 1, y: 0 },
      direction: { x: -1, y: 1 },
    },
    {
      type: GameTokenLayoutType.DIRECTION,
      fillType: randomElementFrom(bidirectionalLayoutTypes),
      initialPosition: { x: 0, y: 0 },
      direction: { x: 1, y: 1 },
    },
  ];

  let wordsToUseDirectionLayout = 0;
  let wordsToUseSpiralLayout = 0;

  sentence.forEach((word, index) => {
    let layout: GameTokenLayout = {
      type: GameTokenLayoutType.NONE,
      fillType: randomElementFrom(bidirectionalLayoutTypes),
    };

    if (Math.random() < 0.2) {
      wordsToUseDirectionLayout++;
    }

    if (Math.random() < 0.2) {
      wordsToUseSpiralLayout++;
    }

    if (wordsToUseDirectionLayout > 0) {
      layout = directionLayouts.pop() || layout;
      wordsToUseDirectionLayout--;
    }

    if (wordsToUseSpiralLayout > 0) {
      layout.fillType = GameTokenLayoutFillType.SPIRAL_CLOCKWISE_INWARDS;
    }

    config.tokens.push(
      createToken({
        content: word,
        layout,
      }),
    );
  });

  return config;
}
